/* jshint globalstrict: true */
'use strict';

/**
 * The lexer takes the original expression string and returns an
 * array of tokens parsed from that string ' fir example the string "a+b" would result in tokens for a,+,b
 * The AST Builder takes the array of tokens generated by lexer and builds up an
 * abstract syntaxt tree from the the ree represents the syntactic structure of the expression as nested javascript
 * objects
 *{
 *   name:  a  },
 *right: {
 *         type: AST.Identifier,
 *name:  b  }
 *}
 *
 * @param expr
 */
function parse(expr) {

    var lexer = new Lexer();
    var parser = new Parser(lexer);
    return parser.parse(expr);
}

function Lexer() {

}
Lexer.prototype.lex = function(text) {

};

function AST(lexer) {
    this.lexer = lexer;
}
AST.prototype.ast = function (text) {
    this.tokens = this.lexer.lex(text);
}

function ASTComiler(astBuilder) {
    this.astBuilder = astBuilder;
}

ASTComiler.prototype.compile = function (text) {
    var ast this.astBuilder.ast(text);
}


function Parser(lexer) {
    this.lexer = lexer;
    this.ast = new AST(this.lexer);
    this.astCompiler = new ASTComiler(this.ast);
}

Parser.prototype.parse = function (text) {
    return this.astCompiler.compile(text);
}
